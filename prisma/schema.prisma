generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(uuid())
  firstName             String
  lastName              String
  email                 String                  @unique
  phone                 String?
  photo                 String?
  photoBase64           String?
  timezone              String?
  password              String
  role                  Role
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  LastSeenSection       LastSeenSection[]
  PoliciesAndProcedures PoliciesAndProcedures[]
  todos                 TodoItem[]
  Comment               Comment[]
  favoriteThreads       FavoriteForumThread[]   @relation("UserFavoriteThreads")
  ForumComment          ForumComment[]
  ForumThread           ForumThread[]
  commentsMade          Notification[]          @relation("Commenter")
  Notification          Notification[]
  Post                  Post[]
  threadSubscriptions   ThreadSubscription[]    @relation("UserThreadSubscriptions")
  UserCourse            UserCourse[]
  ContactMessage        ContactMessage[]
  status                UserStatus              @default(inactive)
  QuizProgress          QuizProgress[]
  formCompletions       UserFormCompletion[]

  @@index([email])
  @@map("users")
}

enum UserStatus {
  active
  inactive
}



model Course {
  id                 String               @id @default(uuid())
  title              String               @unique
  description        String
  image              String
  overview           String
  duration           String
  price              String?
  assessment         String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  syllabusOverview   String
  resourcesOverview  String
  assessments        Json[]
  resources          Json[]
  syllabus           Json[]
  UserCourseProgress UserCourseProgress[]
  modules            Module[]
  Post               Post[]
  users              UserCourse[]
  LastSeenSection    LastSeenSection[]
  courseForms        CourseForm[]
  formCompletions    UserFormCompletion[]

  @@map("courses")
}

model UserCourse {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  isActive  Boolean  @default(false) // Default status as inactive
  isPaid    Boolean  @default(false) // Default status as inactive
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId]) // Ensures a user can only have one entry per course
  @@map("user_courses")
}

model CourseForm {
  id                  String               @id @default(uuid())
  courseId            String
  formId              String
  formName            String
  isRequired          Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  userFormCompletions UserFormCompletion[] @relation("FormCompletions")
  course              Course               @relation(fields: [courseId], references: [id])

  @@unique([courseId, formId])
  @@map("course_forms")
}

model UserFormCompletion {
  id           String     @id @default(uuid())
  userId       String
  courseId     String
  formId       String
  isComplete   Boolean    @default(false)
  completedAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  metadata     Json? // New field for storing form metadata
  courseFormId String
  courseForm   CourseForm @relation(fields: [courseFormId], references: [id], name: "FormCompletions")
  user         User       @relation(fields: [userId], references: [id])
  course       Course     @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId, formId])
  @@map("user_form_completions")
}
model TodoItem {
  id          String   @id @default(uuid())
  title       String?
  content     String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dueDate     DateTime
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}
model Module {
  id                 String               @id @default(uuid())
  title              String
  description        String
  courseId           String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  chapters           Chapter[]
  course             Course               @relation(fields: [courseId], references: [id])
  UserCourseProgress UserCourseProgress[]
  sections           Section[] // Added this line

  @@map("modules")
}

model Chapter {
  id                 String               @id @default(uuid())
  title              String
  description        String
  pdfFile            String
  moduleId           String
  quizId             String?              @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  LastSeenSection    LastSeenSection[]
  UserCourseProgress UserCourseProgress[]
  module             Module               @relation(fields: [moduleId], references: [id])
  QuizAnswer         QuizAnswer[]
  quizzes            Quiz[]
  sections           Section[]
  QuizProgress       QuizProgress[]

  @@map("chapters")
}

model PoliciesAndProcedures {
  id         String @id @default(uuid())
  policiesId String @unique
  userId     String
  user       User   @relation(fields: [userId], references: [id])
}

model Section {
  id               String            @id @default(uuid())
  title            String
  description      String
  chapterId        String
  moduleId         String? // Added this line
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  shortDescription String?
  LastSeenSection  LastSeenSection[]
  chapter          Chapter           @relation(fields: [chapterId], references: [id])
  module           Module?           @relation(fields: [moduleId], references: [id]) // Added this line

  @@map("sections")
}

model UserCourseProgress {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  chapterId String
  sectionId String
  moduleId  String // Added this line
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Chapter   Chapter  @relation(fields: [chapterId], references: [id])
  Course    Course   @relation(fields: [courseId], references: [id])
  Module    Module   @relation(fields: [moduleId], references: [id]) // Added this line

  @@unique([userId, courseId, chapterId, sectionId])
}

model Quiz {
  id        String   @id @default(uuid())
  question  String   @unique
  options   String[]
  answer    String
  chapterId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chapter   Chapter? @relation(fields: [chapterId], references: [id])

  @@map("quizzes")
}

model QuizAnswer {
  id              String   @id @default(uuid())
  quizId          String
  userId          String
  chapterId       String
  answer          String
  isAnswerCorrect Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Chapter         Chapter  @relation(fields: [chapterId], references: [id])

  @@unique([userId, quizId])
  @@map("quiz_answers")
}

model QuizProgress {
  id              String   @id @default(uuid())
  userId          String
  chapterId       String
  totalAttempts   Int      @default(0) // Tracks the total attempts for this quiz
  isPassed        Boolean  @default(false) // Tracks whether the user passed
  score           Float    @default(0) // Stores the score for the most recent attempt
  passingCriteria Float    @default(0) // Stores the passing percentage for the quiz
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  chapter Chapter @relation(fields: [chapterId], references: [id])

  @@unique([userId, chapterId]) // Ensures one progress entry per user per chapter quiz
  @@map("quiz_progress")
}

model LastSeenSection {
  id        String   @id @default(uuid())
  userId    String
  chapterId String
  moduleId  String
  sectionId String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  section   Section  @relation(fields: [sectionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, chapterId])
}

model ForumThread {
  id                  String                @id @default(uuid())
  title               String
  content             String
  userId              String
  status              String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  notificationSent    Boolean               @default(false)
  FavoriteForumThread FavoriteForumThread[]
  ForumComment        ForumComment[]
  user                User                  @relation(fields: [userId], references: [id])
  Notification        Notification[]
  ThreadSubscription  ThreadSubscription[]

  @@map("forum_threads")
}

model ForumComment {
  id        String      @id @default(uuid())
  content   String
  userId    String
  threadId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  thread    ForumThread @relation(fields: [threadId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@map("forum_comments")
}

model FavoriteForumThread {
  id        String      @id @default(uuid())
  userId    String
  threadId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  thread    ForumThread @relation(fields: [threadId], references: [id])
  user      User        @relation("UserFavoriteThreads", fields: [userId], references: [id])

  @@unique([userId, threadId])
  @@map("favorite_forum_threads")
}

model ThreadSubscription {
  id        String      @id @default(uuid())
  userId    String
  threadId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  thread    ForumThread @relation(fields: [threadId], references: [id])
  user      User        @relation("UserThreadSubscriptions", fields: [userId], references: [id])

  @@unique([userId, threadId])
  @@map("thread_subscriptions")
}

model Notification {
  id          String      @id @default(uuid())
  userId      String
  threadId    String
  message     String
  isRead      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  commenterId String?
  commenter   User?       @relation("Commenter", fields: [commenterId], references: [id])
  thread      ForumThread @relation(fields: [threadId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  courseId  String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  course    Course    @relation(fields: [courseId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

model ContactMessage {
  id        String   @id @default(uuid())
  userId    String
  message   String
  isSeen    Boolean  @default(false) // New field to track if the message has been seen by admin
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("contact_messages")
}

enum Role {
  admin
  user
}
